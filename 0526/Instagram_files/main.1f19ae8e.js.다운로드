// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"assets/close_icon.svg":[function(require,module,exports) {
module.exports = "/close_icon.0827d6d3.svg";
},{}],"assets/media_icon.svg":[function(require,module,exports) {
module.exports = "/media_icon.927fb277.svg";
},{}],"assets/arrow_back_icon.svg":[function(require,module,exports) {
module.exports = "/arrow_back_icon.a372c226.svg";
},{}],"main.js":[function(require,module,exports) {
"use strict";

var _close_icon = _interopRequireDefault(require("./assets/close_icon.svg"));

var _media_icon = _interopRequireDefault(require("./assets/media_icon.svg"));

var _arrow_back_icon = _interopRequireDefault(require("./assets/arrow_back_icon.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var modal = "\n                <div class=\"modal__close\">\n                  <img\n                  width=\"22px\"\n                  height=\"22px\"\n                  src=".concat(_close_icon.default, "\n                  alt=\"close_icon_logo\"\n                  />\n                </div>\n                <div class=\"modal__card\">\n                  <div class=\"modal__header\">\n                    <div class=\"modal__back\">\n                      <img width=\"32px\" height=\"24px\" src=").concat(_arrow_back_icon.default, " alt=\"arrow_back_icon\" />\n                    </div>\n                    <h2>\uC0C8 \uAC8C\uC2DC\uBB3C \uB9CC\uB4E4\uAE30</h2>\n                    <p>\uACF5\uC720\uD558\uAE30</p>\n                  </div>\n                  <div class=\"modal__main\">\n                    <img src=").concat(_media_icon.default, " alt=\"media_icon\" />\n                    <h3>\uC0AC\uC9C4\uACFC \uB3D9\uC601\uC0C1\uC744 \uC5C5\uB85C\uB4DC \uD574\uBCF4\uC138\uC694.</h3>\n                    <label for=\"file\">\n                      <p>\uCEF4\uD4E8\uD130\uC5D0\uC11C \uC120\uD0DD</p>\n                    </label>\n                    <input type=\"file\" name=\"file\" id=\"file\" />\n                  </div>\n                </div>\n              ");

function createPost(img) {
  return "\n          <div class=\"modal__post\">\n            <img width=\"478px\" height=\"478px\" src=".concat(img, " alt=\"image\" />\n            <div class=\"modal__write\">\n              <textarea placeholder=\"\uBB38\uAD6C \uC785\uB825...\" autofocus></textarea>\n            </div>\n          </div>\n        ");
}

function createModal() {
  var modalEl = document.createElement('div');
  modalEl.setAttribute('class', 'modal__layout');
  modalEl.innerHTML = modal;
  document.querySelector('body').prepend(modalEl);
  document.querySelector('.modal__close').addEventListener('click', function () {
    document.querySelector('body').removeChild(modalEl);
  });
  var fileEl = document.querySelector('#file');
  fileEl.addEventListener('input', function () {
    var reader = new FileReader();
    reader.readAsDataURL(fileEl.files[0]);

    reader.onload = function () {
      var imageBase64 = reader.result;
      document.querySelector('.modal__card').setAttribute('class', 'modal__card write--post');
      document.querySelector('.modal__main').setAttribute('class', 'modal__main write--post');
      var backBtn = document.querySelector('.modal__back > img');
      var shareBtn = document.querySelector('.modal__header > p');
      backBtn.style.visibility = 'visible';
      shareBtn.style.visibility = 'visible';
      document.querySelector('.modal__main').innerHTML = createPost(imageBase64);
      backBtn.addEventListener('click', function () {
        document.querySelector('body').removeChild(modalEl);
        createModal();
      });
      shareBtn.addEventListener('click', function () {
        var databaseName = 'instagram';
        var version = 1;
        var data = {
          content: document.querySelector('.modal__write > textarea').value,
          image: imageBase64
        };

        if (window.indexedDB) {
          var request = indexedDB.open(databaseName, version); //   request.onsuccess = function () {
          //     const db = request.result;
          //     const store = db.transaction('posts').objectStore('posts');
          //     store.getAll().onsuccess = function (res) {
          //       console.log(res.target.result);
          //     };
          //   };

          request.onsuccess = function () {
            var store = request.result.transaction('posts', 'readwrite').objectStore('posts');

            store.add(data).onsuccess = function () {
              store.getAll().onsuccess = function (e) {
                var response = e.target.result;
                document.querySelector('body').removeChild(modalEl);
                var mainPostEl = document.querySelector('.main__posts');
                mainPostEl.setAttribute('class', 'main__posts');
                mainPostEl.innerHTML = '';

                for (var i = 0; i < response.length; i++) {
                  var postListEl = document.createElement('img');
                  postListEl.setAttribute('src', response[i].image);
                  mainPostEl.appendChild(postListEl);
                } // 모달 창에서 포스트를 정상적으로 저장 이후
                // 지시사항에 맞춰 코드를 작성해주세요.

              };
            };
          };
        }
      });
    };

    reader.onerror = function (error) {
      alert('Error: ', error);
      document.querySelector('body').removeChild(modalEl);
    };
  });
}

function main() {
  document.querySelector('#add-post').addEventListener('click', createModal);
  var databaseName = 'instagram';
  var version = 1;

  if (window.indexedDB) {
    var request = indexedDB.open(databaseName, version); // IndexedDB와 ObjectStore 생성 코드를 페이지 최초 진입시에 실행할 수 있도록 옮겨주세요.

    request.onupgradeneeded = function () {
      request.result.createObjectStore('posts', {
        autoIncrement: true
      });
    };

    request.onsuccess = function () {
      var store = request.result.transaction('posts', 'readwrite').objectStore('posts');

      store.getAll().onsuccess = function (e) {
        var response = e.target.result; // 최초 페이지를 진입할 때,
        // 지시사항에 맞춰 코드를 작성해주세요.

        if (response.length !== 0) {
          document.querySelector('.main__posts').innerHTML = '';

          for (var i = 0; i < response.length; i++) {
            var postListEl = document.createElement('img');
            postListEl.setAttribute('src', response[i].image);
            document.querySelector('.main__posts').appendChild(postListEl);
          }
        } else {
          document.querySelector('.main__posts').appendChild('class', 'main__posts not-posts');
        }
      };
    };
  }
}

main();
},{"./assets/close_icon.svg":"assets/close_icon.svg","./assets/media_icon.svg":"assets/media_icon.svg","./assets/arrow_back_icon.svg":"assets/arrow_back_icon.svg"}],"../node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "46145" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["../node_modules/parcel-bundler/src/builtins/hmr-runtime.js","main.js"], null)
//# sourceMappingURL=/main.1f19ae8e.js.map